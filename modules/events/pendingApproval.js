const fs = require('fs');
const path = require('path');

module.exports = {
  config: {
    name: "pendingApproval",
    eventType: ["message", "log:subscribe"],
    version: "2.0.0",
    credits: "TOHIDUL (Enhanced by TOHI-BOT-HUB)",
    description: "Auto-approve system for groups with instant activation"
  },
  run: async function({ api, event }) {
    try {
      const configPath = path.join(__dirname, '../../config.json');
      const config = require(configPath);

      // Initialize AUTO_APPROVE object if it doesn't exist
      if (!config.AUTO_APPROVE) {
        config.AUTO_APPROVE = {
          enabled: true,
          approvedGroups: [],
          autoApproveMessage: true
        };
        fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
      }

      // If bot is added to a new group
      if (event.type === "log:subscribe" && 
          event.logMessageData.addedParticipants.some(i => i.userFbId == api.getCurrentUserID())) {

        const threadID = event.threadID;

        // Check if auto-approve is enabled
        if (config.AUTO_APPROVE.enabled) {
          // Auto-approve the group instantly
          if (!config.AUTO_APPROVE.approvedGroups.includes(threadID)) {
            config.AUTO_APPROVE.approvedGroups.push(threadID);
            fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
          }

          // Send auto-approval notification to admin
          const adminIds = global.config.ADMINBOT || [];
          if (adminIds.length > 0) {
            try {
              const threadInfo = await api.getThreadInfo(threadID);
              const currentTime = new Date().toLocaleString("bn-BD", {
                timeZone: "Asia/Dhaka",
                hour12: false
              });

              const adminNotificationMsg = `
тХФтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЧ
  ЁЯОК ЁЭЧФЁЭЧиЁЭЧзЁЭЧв ЁЭЧФЁЭЧгЁЭЧгЁЭЧеЁЭЧвЁЭЧйЁЭЧШЁЭЧЧ ЁЯОК
тХЪтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЭ

ЁЯдЦ ржмржЯ ржирждрзБржи ржЧрзНрж░рзБржкрзЗ ржпрзБржХрзНржд рж╣ржпрж╝рзЗржЫрзЗ ржПржмржВ ржЕржЯрзЛ ржПржкрзНрж░рзБржн ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!

ЁЯУК ржЧрзНрж░рзБржк рждржерзНржп:
тФгтФБ ржирж╛ржо: ${threadInfo.threadName}
тФгтФБ ржЖржЗржбрж┐: ${threadID}
тФгтФБ рж╕ржжрж╕рзНржп: ${threadInfo.participantIDs.length} ржЬржи
тФгтФБ рж╕ржоржпрж╝: ${currentTime}
тФЧтФБ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: рждрж╛рзОржХрзНрж╖ржгрж┐ржХ рж╕ржХрзНрж░рж┐ржпрж╝ тЬЕ

ЁЯОп ржмржЯ ржПржЦржиржЗ ржПржЗ ржЧрзНрж░рзБржкрзЗ рж╕ржорзНржкрзВрж░рзНржг рж╕ржХрзНрж░рж┐ржпрж╝ ржПржмржВ рж╕ржм ржХржорж╛ржирзНржб ржХрж╛ржЬ ржХрж░ржмрзЗ!

ЁЯУЛ ржЕржЯрзЛ ржПржкрзНрж░рзБржн рж╕рж┐рж╕рзНржЯрзЗржо ржЪрж╛рж▓рзБ ржЖржЫрзЗред
тЪЩя╕П ржмржирзНржз ржХрж░рждрзЗ: /approve off

тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтЬжтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
ЁЯЪй Made by TOHIDUL
тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтЬжтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА`;

              for (const adminId of adminIds) {
                try {
                  await api.sendMessage(adminNotificationMsg, adminId);
                } catch (adminMsgError) {
                  console.error(`Failed to send admin notification to ${adminId}:`, adminMsgError);
                }
              }
            } catch (threadInfoError) {
              console.error('Error getting thread info for auto approval:', threadInfoError);
            }
          }

          // Send instant activation message to the group
          if (config.AUTO_APPROVE.autoApproveMessage) {
            try {
              const threadInfo = await api.getThreadInfo(threadID);
              const currentTime = new Date().toLocaleString("bn-BD", {
                timeZone: "Asia/Dhaka",
                hour12: false
              });

              const activationMsg = `
тХФтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЧ
  ЁЯОК ЁЭЧкЁЭЧШЁЭЧЯЁЭЧЦЁЭЧвЁЭЧаЁЭЧШ ЁЭЧзЁЭЧв ЁЭЧзЁЭЧвЁЭЧЫЁЭЧЬ-ЁЭЧХЁЭЧвЁЭЧз ЁЯОК
тХЪтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЭ

ЁЯдЦ ${global.config.BOTNAME || 'TOHI-BOT'} ржПржЦржи рж╕ржХрзНрж░рж┐ржпрж╝!

ЁЯОЙ ржПржЗ ржЧрзНрж░рзБржк рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝рзЗржЫрзЗ!
тЬи рж╕ржм ржХржорж╛ржирзНржб ржПржЦржиржЗ ржХрж╛ржЬ ржХрж░ржмрзЗред

ЁЯЪА рж╢рзБрж░рзБ ржХрж░рждрзЗ:
тФгтФБ ${global.config.PREFIX}help - рж╕ржм ржХржорж╛ржирзНржб ржжрзЗржЦрзБржи
тФгтФБ ${global.config.PREFIX}menu - ржХрзНржпрж╛ржЯрж╛ржЧрж░рж┐ ржорзЗржирзБ
тФгтФБ ${global.config.PREFIX}info - ржмржЯ рждржерзНржп
тФЧтФБ ${global.config.PREFIX}admin - ржПржбржорж┐ржи рждрж╛рж▓рж┐ржХрж╛

ЁЯУК ржЧрзНрж░рзБржк рждржерзНржп:
тФгтФБ ржЧрзНрж░рзБржк: ${threadInfo.threadName}
тФгтФБ рж╕ржжрж╕рзНржп: ${threadInfo.participantIDs.length} ржЬржи
тФгтФБ ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕: ${global.config.PREFIX}
тФгтФБ ржпрзБржХрзНржд рж╣ржУржпрж╝рж╛рж░ рж╕ржоржпрж╝: ${currentTime}
тФЧтФБ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: рждрж╛рзОржХрзНрж╖ржгрж┐ржХ рж╕ржХрзНрж░рж┐ржпрж╝ тЬЕ

ЁЯОп ржЕржЯрзЛ ржПржкрзНрж░рзБржн рж╕рж┐рж╕рзНржЯрзЗржо ржжрзНржмрж╛рж░рж╛ рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржЕржирзБржорзЛржжрж┐ржд!

тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтЬжтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
ЁЯЪй Made by TOHIDUL
тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтЬжтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА`;

              setTimeout(() => {
                api.sendMessage(activationMsg, threadID);
              }, 2000); // 2 second delay for better UX
            } catch (activationError) {
              console.error('Error sending activation message:', activationError);
            }
          }
        } else {
          // Manual approval system (original behavior)
          if (!config.APPROVAL) {
            config.APPROVAL = {
              approvedGroups: [],
              pendingGroups: [],
              rejectedGroups: []
            };
          }

          if (!config.APPROVAL.approvedGroups.includes(threadID)) {
            if (!config.APPROVAL.pendingGroups.includes(threadID)) {
              config.APPROVAL.pendingGroups.push(threadID);
              fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
            }

            // Send manual approval notification to admin
            const adminIds = global.config.ADMINBOT || [];
            if (adminIds.length > 0) {
              try {
                const threadInfo = await api.getThreadInfo(threadID);
                const currentTime = new Date().toLocaleString("bn-BD", {
                  timeZone: "Asia/Dhaka",
                  hour12: false
                });

                const adminNotificationMsg = `
тХФтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЧ
  ЁЯФФ ЁЭЧаЁЭЧФЁЭЧбЁЭЧиЁЭЧФЁЭЧЯ ЁЭЧФЁЭЧгЁЭЧгЁЭЧеЁЭЧвЁЭЧйЁЭЧФЁЭЧЯ ЁЯФФ
тХЪтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЭ

ЁЯдЦ ржмржЯ ржирждрзБржи ржЧрзНрж░рзБржкрзЗ ржпрзБржХрзНржд рж╣ржпрж╝рзЗржЫрзЗ!

ЁЯУК ржЧрзНрж░рзБржк рждржерзНржп:
тФгтФБ ржирж╛ржо: ${threadInfo.threadName}
тФгтФБ ржЖржЗржбрж┐: ${threadID}
тФгтФБ рж╕ржжрж╕рзНржп: ${threadInfo.participantIDs.length} ржЬржи
тФгтФБ рж╕ржоржпрж╝: ${currentTime}
тФЧтФБ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: ржорзНржпрж╛ржирзБржпрж╝рж╛рж▓ ржПржкрзНрж░рзБржнрж╛рж▓рзЗрж░ ржЕржкрзЗржХрзНрж╖рж╛ржпрж╝

тЪая╕П ржЕржЯрзЛ ржПржкрзНрж░рзБржн ржмржирзНржз ржЖржЫрзЗ, ржорзНржпрж╛ржирзБржпрж╝рж╛рж▓ ржПржкрзНрж░рзБржнрж╛рж▓ ржкрзНрж░ржпрж╝рзЛржЬржиред

ЁЯОп ржЕржирзБржорзЛржжржирзЗрж░ ржЬржирзНржп:
тФгтФБ /approve on - ржЕржЯрзЛ ржПржкрзНрж░рзБржн ржЪрж╛рж▓рзБ ржХрж░рзБржи
тФЧтФБ ржЕржержмрж╛ ржорзНржпрж╛ржирзБржпрж╝рж╛рж▓ ржПржкрзНрж░рзБржнрж╛рж▓ ржХрж░рзБржи

тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтЬжтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
ЁЯЪй Made by TOHIDUL
тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтЬжтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА`;

                for (const adminId of adminIds) {
                  try {
                    await api.sendMessage(adminNotificationMsg, adminId);
                  } catch (adminMsgError) {
                    console.error(`Failed to send admin notification to ${adminId}:`, adminMsgError);
                  }
                }
              } catch (threadInfoError) {
                console.error('Error getting thread info for manual approval:', threadInfoError);
              }
            }
          }
        }
      }
    } catch (error) {
      console.error('PendingApproval Error:', error);
    }
  }
};