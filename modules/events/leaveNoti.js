
module.exports.config = {
  name: "leave",
  eventType: ["log:unsubscribe"],
  version: "7.0.0",
  credits: "TOHI-BOT-HUB (Anti-Out Event Integrated by TOHIDUL)",
  description: "üé≠ Enhanced leave notification with integrated Anti-Out event system",
  dependencies: {
    "fs-extra": "",
    "path": ""
  }
};

const fs = require('fs-extra');
const path = require('path');

// Stylish text function
function stylishText(text, style = "default") {
  const styles = {
    default: `‚ú® ${text} ‚ú®`,
    title: `üé≠ ${text} üé≠`,
    subtitle: `üåü ${text} üåü`,
    warning: `‚ö†Ô∏è ${text} ‚ö†Ô∏è`,
    success: `‚úÖ ${text} ‚úÖ`,
    error: `‚ùå ${text} ‚ùå`,
    bangla: `üáßüá© ${text} üáßüá©`,
    love: `üíñ ${text} üíñ`,
    fire: `üî• ${text} üî•`,
    boss: `üëë ${text} üëë`,
    antiout: `üõ°Ô∏è ${text} üõ°Ô∏è`
  };
  return styles[style] || styles.default;
}

// Handle anti-out event commands
module.exports.handleEvent = async function({ api, event, Threads }) {
  const { body = "", threadID, senderID } = event;
  
  // Check for anti-out toggle commands (case insensitive)
  const lowerBody = body.toLowerCase().trim();
  
  if (lowerBody === "/antiout on" || lowerBody === "antiout on") {
    try {
      // Check if user is bot admin
      const isBotAdmin = global.config.ADMINBOT.includes(senderID.toString());
      
      // Check if user is group admin
      const info = await api.getThreadInfo(threadID);
      const isGroupAdmin = info.adminIDs.some(item => item.id == senderID);
      
      // Permission check - only bot admin or group admin can use
      if (!isBotAdmin && !isGroupAdmin) {
        return api.sendMessage(
          `${stylishText("Access Denied!", "error")}\n\n‚ùå ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶¨‡¶ü ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡¶æ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶è‡¶°‡¶Æ‡¶ø‡¶® Anti-Out ‡¶ö‡¶æ‡¶≤‡ßÅ/‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§\n\nüí° ‡¶™‡¶æ‡¶∞‡¶Æ‡¶ø‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n\nüö© Made by TOHIDUL`, 
          threadID
        );
      }

      // Check if bot is group admin
      if (!info.adminIDs.some(item => item.id == api.getCurrentUserID())) {
        return api.sendMessage(
          `${stylishText("Bot Admin Required!", "warning")}\n\n‚ùå ‡¶¨‡¶ü‡¶ï‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡¶æ‡¶®‡¶æ‡¶® Anti-Out ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§\n\nü§ñ ‡¶¨‡¶ü ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡¶¶‡ßá‡¶∞ ‡¶è‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§\n\nüö© Made by TOHIDUL`, 
          threadID
        );
      }

      // Enable anti-out
      const data = (await Threads.getData(threadID)).data || {};
      data["antiout"] = true;
      await Threads.setData(threadID, { data });
      global.data.threadData.set(parseInt(threadID), data);

      const onMessage = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
  üõ°Ô∏è ùòºùôâùôèùôÑ-ùôäùôêùôè ùòºùòæùôèùôÑùôëùòºùôèùôÄùòø üõ°Ô∏è
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ  ‚úÖ Anti-Out ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!
‚îÉ
‚îÉ  üîí ‡¶è‡¶ñ‡¶® ‡¶ï‡ßá‡¶â ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶õ‡¶æ‡¶°‡¶º‡¶≤‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶è‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá
‚îÉ  üí™ ‡¶™‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶â‡¶™‡¶æ‡¶Ø‡¶º ‡¶®‡ßá‡¶á!
‚îÉ  üö´ Self-leave ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶ø‡¶∑‡¶ø‡¶¶‡ßç‡¶ß
‚îÉ
‚îÉ  ‚ö†Ô∏è  **‡¶®‡ßã‡¶ü:** ‡¶¨‡¶ü ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá
‚îÉ  üõ°Ô∏è  **‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏:** ACTIVE & MONITORING
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ

üïí **‡¶∏‡¶Æ‡¶Ø‡¶º:** ${new Date().toLocaleString("bn-BD", { timeZone: "Asia/Dhaka", hour12: false })}
üö© **Made by TOHIDUL**`;

      return api.sendMessage(onMessage, threadID);
      
    } catch (error) {
      console.error('AntiOut ON error:', error);
      return api.sendMessage(
        `${stylishText("System Error!", "error")}\n\n‚ùå Anti-Out ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§\n\nüö© Made by TOHIDUL`, 
        threadID
      );
    }
  }

  if (lowerBody === "/antiout off" || lowerBody === "antiout off") {
    try {
      // Check if user is bot admin
      const isBotAdmin = global.config.ADMINBOT.includes(senderID.toString());
      
      // Check if user is group admin
      const info = await api.getThreadInfo(threadID);
      const isGroupAdmin = info.adminIDs.some(item => item.id == senderID);
      
      // Permission check - only bot admin or group admin can use
      if (!isBotAdmin && !isGroupAdmin) {
        return api.sendMessage(
          `${stylishText("Access Denied!", "error")}\n\n‚ùå ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶¨‡¶ü ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡¶æ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶è‡¶°‡¶Æ‡¶ø‡¶® Anti-Out ‡¶ö‡¶æ‡¶≤‡ßÅ/‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§\n\nüí° ‡¶™‡¶æ‡¶∞‡¶Æ‡¶ø‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n\nüö© Made by TOHIDUL`, 
          threadID
        );
      }

      // Disable anti-out
      const data = (await Threads.getData(threadID)).data || {};
      data["antiout"] = false;
      await Threads.setData(threadID, { data });
      global.data.threadData.set(parseInt(threadID), data);

      const offMessage = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
  üîì ùòºùôâùôèùôÑ-ùôäùôêùôè ùòøùôÄùòºùòæùôèùôÑùôëùòºùôèùôÄùòø üîì
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ  ‚ùå Anti-Out ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!
‚îÉ
‚îÉ  üîì ‡¶è‡¶ñ‡¶® ‡¶ï‡ßá‡¶â ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá
‚îÉ  üòî ‡¶Ü‡¶∞ ‡¶´‡ßá‡¶∞‡¶§ ‡¶Ü‡¶®‡¶æ ‡¶π‡¶¨‡ßá ‡¶®‡¶æ
‚îÉ  üö™ Normal leave/exit ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶Ü‡¶õ‡ßá
‚îÉ
‚îÉ  üí° **‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá:** /antiout on
‚îÉ  üõ°Ô∏è **‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏:** DISABLED
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ

üïí **‡¶∏‡¶Æ‡¶Ø‡¶º:** ${new Date().toLocaleString("bn-BD", { timeZone: "Asia/Dhaka", hour12: false })}
üö© **Made by TOHIDUL**`;

      return api.sendMessage(offMessage, threadID);
      
    } catch (error) {
      console.error('AntiOut OFF error:', error);
      return api.sendMessage(
        `${stylishText("System Error!", "error")}\n\n‚ùå Anti-Out ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§\n\nüö© Made by TOHIDUL`, 
        threadID
      );
    }
  }

  // Check for anti-out status command
  if (lowerBody === "/antiout status" || lowerBody === "antiout status" || lowerBody === "/antiout" || lowerBody === "antiout") {
    try {
      const data = (await Threads.getData(threadID)).data || {};
      const isAntiOutEnabled = data.antiout === true;
      
      const statusMessage = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
  üõ°Ô∏è ùòºùôâùôèùôÑ-ùôäùôêùôè ùôéùôèùòºùôèùôêùôé üõ°Ô∏è
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üîß **‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:**
   ‚Ä¢ \`/antiout on\` - Anti-Out ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
   ‚Ä¢ \`/antiout off\` - Anti-Out ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®
   ‚Ä¢ \`/antiout status\` - ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®

üìä **‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ:** ${isAntiOutEnabled ? 'üü¢ ‡¶ö‡¶æ‡¶≤‡ßÅ' : 'üî¥ ‡¶¨‡¶®‡ßç‡¶ß'}

üí° **‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø:**
   ‚Ä¢ ‡¶ï‡ßá‡¶â ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶õ‡¶æ‡¶°‡¶º‡¶≤‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶è‡¶° ‡¶ï‡¶∞‡¶¨‡ßá
   ‚Ä¢ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶¨‡¶ü/‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®
   ‚Ä¢ ‡¶¨‡¶ü ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá

üö© **Made by TOHIDUL**`;

      return api.sendMessage(statusMessage, threadID);
      
    } catch (error) {
      console.error('AntiOut STATUS error:', error);
      return api.sendMessage(
        `${stylishText("System Error!", "error")}\n\n‚ùå Anti-Out ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§\n\nüö© Made by TOHIDUL`, 
        threadID
      );
    }
  }
};

// Main leave notification function
module.exports.run = async function({ api, event, Users, Threads }) {
  try {
    const { threadID } = event;
    const leftParticipantFbId = event.logMessageData.leftParticipantFbId;

    // Don't process if bot itself left
    if (leftParticipantFbId == api.getCurrentUserID()) return;

    // Get thread data for anti-out setting
    let data = (await Threads.getData(threadID)).data || {};
    const isAntiOutEnabled = data.antiout === true;

    // Get user info
    const userInfo = {
      id: leftParticipantFbId,
      name: global.data.userName.get(leftParticipantFbId) || await Users.getNameUser(leftParticipantFbId) || "Unknown User"
    };

    // Detect leave type
    const isKicked = event.author !== leftParticipantFbId;
    const isSelfLeave = event.author === leftParticipantFbId;

    // Current time in Bangladesh
    const currentTime = new Date().toLocaleString("bn-BD", {
      timeZone: "Asia/Dhaka",
      hour12: false
    });

    // Handle Anti-Out for self-leave
    if (isSelfLeave && isAntiOutEnabled) {
      // Try to re-add user
      api.addUserToGroup(leftParticipantFbId, threadID, async (error, info) => {
        if (error) {
          console.error(`Failed to re-add user ${leftParticipantFbId}:`, error);
          
          // Send failure message
          const failureMsg = `
${stylishText("‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶•‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ ‡¶®‡ßá‡¶á ‡¶¶‡ßá‡¶ñ‡ßá ‡¶≤‡¶ø‡¶≠ ‡¶¶‡¶ø‡¶õ‡¶ø‡¶≤‡ßã!", "fire")}

üòÇ ${userInfo.name} ‡¶™‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•!
‚ùå ‡¶´‡ßá‡¶∞‡¶§ ‡¶Ü‡¶®‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø - ‡¶π‡¶Ø‡¶º‡¶§‡ßã ‡¶¨‡¶ü‡¶ï‡ßá ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§

üö© Made by TOHIDUL`;

          return api.sendMessage(failureMsg, threadID);
        } else {
          // Send success message with video
          const successMsg = `
${stylishText("‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶•‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡¶§‡¶æ ‡¶®‡ßá‡¶á ‡¶¶‡ßá‡¶ñ‡ßá ‡¶≤‡¶ø‡¶≠ ‡¶¶‡¶ø‡¶õ‡¶ø‡¶≤‡ßã, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã ‡¶Ü‡¶õ‡¶ø‚Äî‡¶Ø‡ßá‡¶§‡ßá ‡¶¶‡¶ø‡¶¨‡ßã ‡¶®‡¶æ!", "boss")}

üòé ${userInfo.name} ‡¶™‡¶æ‡¶≤‡¶æ‡¶§‡ßá ‡¶ö‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡¶ø‡¶≤‡ßã ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶ß‡¶∞‡ßá ‡¶Ü‡¶®‡¶≤‡¶æ‡¶Æ!
üîí Anti-Out ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§

üö© Made by TOHIDUL`;

          try {
            const videoPath = path.join(__dirname, 'cache', 'leave', 'Pakad MC Meme Template - Pakad Le BKL Ke Meme - Chodu CID Meme.mp4');
            
            let attachment = null;
            if (fs.existsSync(videoPath)) {
              const stats = fs.statSync(videoPath);
              if (stats.size > 1000) {
                attachment = fs.createReadStream(videoPath);
              }
            }

            const messageData = { body: successMsg };
            if (attachment) {
              messageData.attachment = attachment;
            }

            return api.sendMessage(messageData, threadID);
          } catch (videoError) {
            return api.sendMessage(successMsg, threadID);
          }
        }
      });
      return;
    }

    // Handle normal leave notifications when anti-out is OFF or user was kicked
    if (!isAntiOutEnabled || isKicked) {
      let message;
      
      if (isKicked) {
        // User was kicked
        message = `
${stylishText("‡¶è‡¶ï‡¶ú‡¶® ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶Æ‡¶æ‡¶®‡¶ø‡¶§ ‡¶ú‡¶ò‡¶®‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø ‡¶ï‡¶ø‡¶ï ‡¶ñ‡ßá‡¶Ø‡¶º‡ßá‡¶õ‡ßá!", "warning")}

ü¶µ ${userInfo.name} ‡¶ï‡ßá ‡¶ï‡¶ø‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§
üòî ‡¶Ü‡¶∞ ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶≤‡ßã ‡¶®‡¶æ‡•§

üö© Made by TOHIDUL`;
      } else {
        // Self leave when anti-out is off
        message = `
${stylishText("‡¶è‡¶ï‡¶ú‡¶® ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶Æ‡¶æ‡¶®‡¶ø‡¶§ ‡¶ú‡¶ò‡¶®‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø ‡¶≤‡¶ø‡¶≠ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶®‡¶ø‡¶≤‡ßã!", "warning")}

üòî ${userInfo.name} ‡¶®‡¶ø‡¶ú‡ßá‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§
üîì Anti-Out ‡¶¨‡¶®‡ßç‡¶ß ‡¶•‡¶æ‡¶ï‡¶æ‡¶Ø‡¶º ‡¶´‡ßá‡¶∞‡¶§ ‡¶Ü‡¶®‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§

üö© Made by TOHIDUL`;
      }

      return api.sendMessage(message, threadID);
    }

  } catch (error) {
    console.error('LeaveNoti integrated error:', error.message);
    
    try {
      const leftParticipantFbId = event.logMessageData.leftParticipantFbId;
      const name = global.data.userName.get(leftParticipantFbId) || "Unknown User";

      const fallbackMessage = `
${stylishText("‡¶è‡¶ï‡¶ú‡¶® ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶Æ‡¶æ‡¶®‡¶ø‡¶§ ‡¶ú‡¶ò‡¶®‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø ‡¶≤‡¶ø‡¶≠ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶®‡¶ø‡¶≤‡ßã!", "warning")}

üòî ${name} ‡¶ö‡¶≤‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§

üö© Made by TOHIDUL`;

      return api.sendMessage(fallbackMessage, event.threadID);
    } catch (fallbackError) {
      console.error('Fallback message failed:', fallbackError.message);
      return;
    }
  }
};
