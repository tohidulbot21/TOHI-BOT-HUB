module.exports.config = {
  name: "leave",
  eventType: ["log:unsubscribe"],
  version: "1.2.0",
  credits: "TOHI-BOT-HUB (Enhanced by TOHIDUL)",
  description: "Enhanced stylish notification when someone leaves or is kicked from the group",
  dependencies: {
    "fs-extra": "",
    "path": "",
    "canvas": "",
    "jimp": "",
    "axios": ""
  }
};

const { apiCallWithRetry } = require("../../utils/apiHelper");
const { createCanvas, loadImage, registerFont } = require('canvas');
const fs = require('fs-extra');
const path = require('path');

let backgrounds = [
  "https://i.imgur.com/MnAwD8U.jpg",
  "https://i.imgur.com/tSkuyIu.jpg",
  "https://i.imgur.com/dDSh0wc.jpeg",
  "https://i.imgur.com/UucSRWJ.jpeg"
];
let fontlink = 'https://drive.google.com/u/0/uc?id=1ZwFqYB-x6S9MjPfYm3t3SP1joohGl4iw&export=download';

module.exports.run = async function({ api, event, Users, Threads }) {
  try {
    // Ensure cache/leave exists
    const cacheLeaveDir = path.join(__dirname, "cache", "leave");
    if (!fs.existsSync(cacheLeaveDir)) fs.mkdirSync(cacheLeaveDir, { recursive: true });

    const leftParticipantFbId = event.logMessageData.leftParticipantFbId;
    const name = global.data.userName.get(leftParticipantFbId) || await Users.getNameUser(leftParticipantFbId);

    // Detect leave type
    const isSelfLeave = event.author == leftParticipantFbId;
    const currentTime = new Date().toLocaleString("bn-BD", {
      timeZone: "Asia/Dhaka",
      hour12: false
    });

    // Get thread info
    const threadInfo = await api.getThreadInfo(event.threadID);
    const threadName = threadInfo.threadName || "Unknown Group";
    const remainingMembers = threadInfo.participantIDs.length;

    // Enhanced Bangla & Stylish message for self-leave
    const leaveSelfMsg = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
  üòä ùó¶ùóòùóüùóô ùóüùóòùóîùó©ùóò ùóóùóòùóßùóòùóñùóßùóòùóó üòä
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üëã ${name} ‡¶®‡¶ø‡¶ú‡ßá‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶ö‡¶≤‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡¶®!

üí≠ ‡¶π‡¶Ø‡¶º‡¶§‡ßã:
‚î£‚îÅ ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßç‡¶Ø‡¶∏‡ßç‡¶§‡¶§‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá
‚î£‚îÅ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶õ‡ßá‡¶® ‡¶®‡¶æ
‚î£‚îÅ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá
‚îó‚îÅ ‡¶¨‡¶æ ‡¶π‡¶Ø‡¶º‡¶§‡ßã ‡¶≠‡ßÅ‡¶≤‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡¶® ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞! üòÖ

üìä ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü:
‚î£‚îÅ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™: ${threadName}
‚î£‚îÅ ‡¶Ö‡¶¨‡¶∂‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø: ${remainingMembers} ‡¶ú‡¶®
‚îó‚îÅ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${currentTime}

üåü ${name}, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶™‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶≠‡¶¨ ‡¶ï‡¶∞‡¶¨‡ßã!
üíù ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ü‡¶∏‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§

‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π ‡¶π‡¶æ‡¶´‡ßá‡¶ú! ü§≤

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üö© ùôèùôäùôÉùôÑ-ùòΩùôäùôè ùôèùôÄùòºùôà
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;

    // Enhanced Bangla & Stylish message for admin kick
    const leaveKickMsg = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
  üëÆ‚Äç‚ôÇÔ∏è ùóîùóóùó†ùóúùó° ùóîùóñùóßùóúùó¢ùó° üëÆ‚Äç‚ôÇÔ∏è
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚ö° ${name} ‡¶ï‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!

üéØ ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®‡ßá‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá:
‚î£‚îÅ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶≠‡¶ô‡ßç‡¶ó
‚î£‚îÅ ‡¶Ö‡¶®‡ßÅ‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶Ü‡¶ö‡¶∞‡¶£
‚î£‚îÅ ‡¶∏‡ßç‡¶™‡ßç‡¶Ø‡¶æ‡¶Æ‡¶ø‡¶Ç ‡¶¨‡¶æ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶®
‚îó‚îÅ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Æ‡¶æ‡¶®‡¶æ‡¶®‡¶∏‡¶á ‡¶®‡¶Ø‡¶º

üìä ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü:
‚î£‚îÅ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™: ${threadName}
‚î£‚îÅ ‡¶Ö‡¶¨‡¶∂‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø: ${remainingMembers} ‡¶ú‡¶®
‚îó‚îÅ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${currentTime}

‚ö†Ô∏è ‡¶∏‡¶¨‡¶æ‡¶á‡¶ï‡ßá ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá ‡¶π‡¶¨‡ßá:
‚î£‚îÅ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ ‡¶Æ‡ßá‡¶®‡ßá ‡¶ö‡¶≤‡ßÅ‡¶®
‚î£‚îÅ ‡¶∏‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶≠‡¶æ‡¶≤‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
‚î£‚îÅ ‡¶∏‡ßç‡¶™‡ßç‡¶Ø‡¶æ‡¶Æ ‡¶¨‡¶æ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶è‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶ö‡¶≤‡ßÅ‡¶®
‚îó‚îÅ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®

üõ°Ô∏è ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§‡¶ï‡ßá ‡¶∏‡¶Æ‡ßç‡¶Æ‡¶æ‡¶® ‡¶ï‡¶∞‡¶ø!

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üö© ùôèùôäùôÉùôÑ-ùòΩùôäùôè ùôèùôÄùòºùôà
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;

    try {
      // Download and register font with retry logic
      let fontPath = path.join(__dirname, "cache", "font.ttf");
      if (!fs.existsSync(fontPath)) {
        try {
          let fontResponse = await apiCallWithRetry(fontlink, { responseType: 'arraybuffer' }, 2);
          fs.writeFileSync(fontPath, fontResponse.data);
        } catch (fontError) {
          console.error('Font download error:', fontError.message);
        }
      }

      if (fs.existsSync(fontPath)) {
        registerFont(fontPath, { family: 'CustomFont' });
      }

      // Pick random background with retry logic
      let backgroundImage;
      try {
        let randomBackground = backgrounds[Math.floor(Math.random() * backgrounds.length)];
        let background = await apiCallWithRetry(randomBackground, { responseType: 'arraybuffer' }, 2);
        backgroundImage = await loadImage(background.data);
      } catch (bgError) {
        console.error('Background download error:', bgError.message);
        // Create a simple colored background as fallback
        const canvas = createCanvas(1280, 720);
        const ctx = canvas.getContext('2d');
        ctx.fillStyle = '#2C3E50';
        ctx.fillRect(0, 0, 1280, 720);
        backgroundImage = await loadImage(canvas.toBuffer());
      }

      // Get avatar & make circle with retry logic
      let roundAvatarImg;
      try {
        let avatarUrl = `https://graph.facebook.com/${leftParticipantFbId}/picture?height=720&width=720&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`;
        let avatarPath = path.join(__dirname, "cache/leave/leave_avatar.png");

        let avatarResponse = await apiCallWithRetry(avatarUrl, { responseType: 'arraybuffer' }, 2);
        fs.writeFileSync(avatarPath, avatarResponse.data);

        const Jimp = require("jimp");
        let avatar = await Jimp.read(avatarPath);
        avatar.circle();
        let roundAvatar = await avatar.getBufferAsync('image/png');
        roundAvatarImg = await loadImage(roundAvatar);
      } catch (avatarError) {
        console.error('Avatar processing error:', avatarError.message);
        // Create a simple circle as fallback
        const avatarCanvas = createCanvas(420, 420);
        const avatarCtx = avatarCanvas.getContext('2d');
        avatarCtx.fillStyle = '#34495E';
        avatarCtx.beginPath();
        avatarCtx.arc(210, 210, 210, 0, Math.PI * 2);
        avatarCtx.fill();
        roundAvatarImg = await loadImage(avatarCanvas.toBuffer());
      }

      // Canvas setup
      const canvas = createCanvas(1280, 720);
      const ctx = canvas.getContext('2d');
      const shortName = name.length > 15 ? name.slice(0, 15) + "..." : name;

      // Draw background and avatar
      ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);
      ctx.drawImage(roundAvatarImg, canvas.width / 2 - 210, canvas.height / 2 - 180, 420, 420);

      // Draw texts with custom font or fallback
      const fontFamily = fs.existsSync(fontPath) ? 'CustomFont' : 'Arial';

      ctx.font = `bold 80px ${fontFamily}`;
      ctx.fillStyle = '#FFF';
      ctx.textAlign = 'center';
      ctx.fillText(shortName, canvas.width / 2, canvas.height / 2 + 130);

      ctx.font = `40px ${fontFamily}`;
      ctx.fillStyle = isSelfLeave ? '#FFD700' : '#FF6B6B';
      ctx.fillText(isSelfLeave ? "‡¶®‡¶ø‡¶ú‡ßá‡¶á ‡¶ö‡¶≤‡ßá ‡¶ó‡ßá‡¶õ‡ßá!" : "‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶≤‡ßã!", canvas.width / 2, canvas.height / 2 + 200);

      // Add additional text
      ctx.font = `30px ${fontFamily}`;
      ctx.fillStyle = '#87CEEB';
      ctx.fillText(threadName, canvas.width / 2, canvas.height / 2 + 250);

      // Save final image
      let finalImagePath = path.join(__dirname, 'cache/leave/leave.png');
      let finalImage = canvas.toBuffer();
      fs.writeFileSync(finalImagePath, finalImage);

      // Send enhanced stylish Bangla message with image
      try {
        return api.sendMessage({
          body: isSelfLeave ? leaveSelfMsg : leaveKickMsg,
          attachment: fs.createReadStream(finalImagePath)
        }, event.threadID);
      } catch (sendError) {
        console.error('Failed to send message with image:', sendError.message);
        // Try sending without image
        return api.sendMessage({
          body: isSelfLeave ? leaveSelfMsg : leaveKickMsg
        }, event.threadID);
      }

    } catch (imageError) {
      console.error('Leave image generation error:', imageError.message);

      // Send message without image if image processing fails
      try {
        return api.sendMessage({
          body: isSelfLeave ? leaveSelfMsg : leaveKickMsg
        }, event.threadID);
      } catch (fallbackError) {
        console.error('Failed to send fallback message:', fallbackError.message);
        // If even the fallback fails, just return silently
        return;
      }
    }

  } catch (error) {
    console.error('LeaveNoti main error:', error.message);

    // Fallback simple leave message
    try {
      const leftParticipantFbId = event.logMessageData.leftParticipantFbId;
      const name = global.data.userName.get(leftParticipantFbId) || "Unknown User";
      const isSelfLeave = event.author == leftParticipantFbId;

      const fallbackMsg = `
${isSelfLeave ? 'üëã' : '‚ö°'} ${name} ${isSelfLeave ? '‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶ö‡¶≤‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡¶®' : '‡¶ï‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá'}‡•§

üö© Made by TOHIDUL`;

      return api.sendMessage(fallbackMsg, event.threadID);
    } catch (finalError) {
      console.error('Final fallback also failed:', finalError.message);
      // If everything fails, just return silently to prevent crashes
      return;
    }
  }
};