module.exports.config = {
  name: "approve",
  version: "5.0.0",
  permission: 2,
  usePrefix: true,
  credits: "TOHIDUL (Easy Bangla Edition)",
  description: "Owner approval system ‚Äî approved ‡¶õ‡¶æ‡¶°‡¶º‡¶æ ‡¶ï‡ßã‡¶®‡ßã ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶¨‡¶ü ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§",
  commandCategory: "Admin",
  usages: "/approve [pending|all|status|reject <ID>|<ID>]",
  cooldowns: 5
};

const OWNER_ID = "100092006324917";

module.exports.run = async function ({ api, event, args }) {
  if (event.senderID !== OWNER_ID)
      return api.sendMessage(`‚õîÔ∏è ‡¶ï‡ßá‡¶¨‡¶≤ owner (${OWNER_ID}) approval ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®!`, event.threadID, event.messageID);

  const { threadID, messageID } = event;
  const { configPath } = global.client;
  const { writeFileSync } = global.nodemodule["fs-extra"];
  delete require.cache[require.resolve(configPath)];
  var config = require(configPath);

  if (!config.APPROVAL)
      config.APPROVAL = { approvedGroups: [], pendingGroups: [], rejectedGroups: [] };
  writeFileSync(configPath, JSON.stringify(config, null, 2), 'utf8');

  const command = (args[0] || "status").toLowerCase();

  // Helper for usage
  const usageMsg =
`üìã Approved System:
- /approve pending : pending ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
- /approve all : ‡¶∏‡¶¨ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü
- /approve <ID> : ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶ö‡¶æ‡¶≤‡ßÅ
- /approve reject <ID> : ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤
- (‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá /approve ‡¶¶‡¶ø‡¶≤‡ßá ‡¶ê ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶¨‡ßá)`;

  try {
    switch (command) {
      case "pending": {
        const pendingGroups = config.APPROVAL.pendingGroups || [];
        if (!pendingGroups.length)
            return api.sendMessage("‚è≥ ‡¶ï‡ßã‡¶®‡ßã pending ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶®‡ßá‡¶á!\n"+usageMsg, threadID, messageID);
        let msg = `‚è≥ Pending ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ (${pendingGroups.length}):\n`;
        for (let i=0; i<Math.min(pendingGroups.length,10); i++) {
          try {
            const info = await api.getThreadInfo(pendingGroups[i]);
            msg += ` ${i+1}. ${info.threadName}\n    üÜî ${pendingGroups[i]}\n`;
          } catch {
            msg += ` ${i+1}. [‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡ßá‡¶á]\n    üÜî ${pendingGroups[i]}\n`;
          }
        }
        msg += `\nApprove: /approve <ID>\n${usageMsg}`;
        return api.sendMessage(msg, threadID, messageID);
      }
      case "all": {
        const { approvedGroups = [], pendingGroups = [], rejectedGroups = [] } = config.APPROVAL;
        let msg = `‚úÖ Approved: ${approvedGroups.length}\n‚è≥ Pending: ${pendingGroups.length}\n‚ùå Rejected: ${rejectedGroups.length}\n\n${usageMsg}`;
        return api.sendMessage(msg, threadID, messageID);
      }
      case "status": {
        const { approvedGroups = [], pendingGroups = [], rejectedGroups = [] } = config.APPROVAL;
        let msg = `‚úÖ Approved: ${approvedGroups.length}\n‚è≥ Pending: ${pendingGroups.length}\n‚ùå Rejected: ${rejectedGroups.length}\n\n${usageMsg}`;
        return api.sendMessage(msg, threadID, messageID);
      }
      case "reject": {
        const targetID = args[1];
        if (!targetID)
          return api.sendMessage("‚ùå ThreadID ‡¶¶‡¶ø‡¶®! ‡¶Ø‡ßá‡¶Æ‡¶®: /approve reject 123456", threadID, messageID);
        if (!config.APPROVAL.rejectedGroups.includes(targetID))
          config.APPROVAL.rejectedGroups.push(targetID);
        config.APPROVAL.pendingGroups = config.APPROVAL.pendingGroups.filter(id => id !== targetID);
        config.APPROVAL.approvedGroups = config.APPROVAL.approvedGroups.filter(id => id !== targetID);
        writeFileSync(configPath, JSON.stringify(config, null, 2), 'utf8');
        api.sendMessage(`‚ùå ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ (${targetID}) ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!`, threadID, messageID);
        break;
      }
      default: {
        // Approve current group or by ID
        let approveTarget = (args[0] && !isNaN(args[0])) ? args[0] : threadID;
        if (config.APPROVAL.approvedGroups.includes(approveTarget))
            return api.sendMessage("‚úÖ ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ!", threadID, messageID);
        
        config.APPROVAL.approvedGroups.push(approveTarget);
        config.APPROVAL.pendingGroups = config.APPROVAL.pendingGroups.filter(id => id !== approveTarget);
        config.APPROVAL.rejectedGroups = config.APPROVAL.rejectedGroups.filter(id => id !== approveTarget);
        writeFileSync(configPath, JSON.stringify(config, null, 2), 'utf8');
        
        try {
          const info = await api.getThreadInfo(approveTarget);
          if (approveTarget === threadID) {
            // Current group approval
            api.sendMessage(
`‚úÖ ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!

‡¶®‡¶æ‡¶Æ: ${info.threadName}
‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞: ${info.participantIDs.length} ‡¶ú‡¶®

‡¶è‡¶ñ‡¶® ‡¶∏‡¶¨ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶ö‡¶æ‡¶≤‡ßÅ!
/help ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®‡•§`, threadID, messageID);
          } else {
            // Different group approval
            api.sendMessage(
`‚úÖ ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!

‡¶®‡¶æ‡¶Æ: ${info.threadName}
‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞: ${info.participantIDs.length} ‡¶ú‡¶®

‡¶è‡¶ñ‡¶® ‡¶∏‡¶¨ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶ö‡¶æ‡¶≤‡ßÅ!
/help ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®‡•§`, approveTarget);
            api.sendMessage(`‚úÖ "${info.threadName}" ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ü‡¶ø ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!`, threadID, messageID);
          }
        } catch {
          api.sendMessage(`‚úÖ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!`, threadID, messageID);
        }
        break;
      }
    }
  } catch (error) {
    api.sendMessage("‚ùå ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", threadID, messageID);
  }
};