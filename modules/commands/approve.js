module.exports.config = {
    name: "approve",
    version: "2.1.0",
    permission: 2, // Only bot owner can use this command
    usePrefix: true,
    credits: "TOHI-BOT-HUB",
    description: "Approve/remove threads or users by thread ID or mention. Only the bot owner can use.",
    commandCategory: "Admin",
    usages: "approve [list|box|remove] [threadID|@mentions]",
    cooldowns: 5
};

// Set your Facebook UID here (only you, the bot owner, can use this command)
const OWNER_ID = "100092006324917"; // Change this to your Facebook ID

module.exports.run = async function ({ api, event, args, Threads, Users }) {
    if (event.senderID !== OWNER_ID) {
        return api.sendMessage(`‚õîÔ∏è ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶¨‡¶ü ‡¶Æ‡¶æ‡¶≤‡¶ø‡¶ï (${OWNER_ID}) ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®!`, event.threadID, event.messageID);
    }

    const content = args.slice(1);
    const { threadID, messageID, mentions } = event;
    const { configPath } = global.client;
    const { APPROVED } = global.config;
    const { writeFileSync } = global.nodemodule["fs-extra"];
    const mention = Object.keys(mentions || {});
    delete require.cache[require.resolve(configPath)];
    var config = require(configPath);

    try {
        switch ((args[0] || "").toLowerCase()) {
            case "list":
            case "all":
            case "-a": {
                const approvedList = APPROVED || config.APPROVED || [];
                let msg = [];

                for (const id of approvedList) {
                    if (parseInt(id)) {
                        let displayInfo;
                        try {
                            const groupName = (await global.data.threadInfo.get(id)).threadName || "Unknown Group";
                            displayInfo = `üìå ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™: ${groupName}\nüÜî ‡¶Ü‡¶á‡¶°‡¶ø: ${id}`;
                        } catch (e) {
                            const userName = await Users.getNameUser(id);
                            displayInfo = `üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: ${userName}\nüÜî ‡¶Ü‡¶á‡¶°‡¶ø: ${id}`;
                        }
                        msg.push(displayInfo);
                    }
                }

                const finalMsg = 
`‚ï≠‚îÄ‚îÄ‚îÄüåü ùóîùóΩùóΩùóøùóºùòÉùó≤ùó± ùóüùó∂ùòÄùòÅ üåü‚îÄ‚îÄ‚îÄ‚ïÆ
${msg.length ? msg.join('\n\n') : "‡¶ï‡ßá‡¶â ‡¶®‡ßá‡¶á!"}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
üëë Crafted by TOHIDUL`;
                return api.sendMessage(finalMsg, threadID, messageID);
            }

            case "box": {
                if (mention.length && isNaN(content[0])) {
                    let listAdded = [];
                    for (const id of mention) {
                        if (!APPROVED.includes(id)) {
                            APPROVED.push(id);
                            config.APPROVED.push(id);
                        }
                        listAdded.push(`üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: ${event.mentions[id]}\nüÜî ‡¶Ü‡¶á‡¶°‡¶ø: ${id}`);
                    }
                    writeFileSync(configPath, JSON.stringify(config, null, 2), 'utf8');
                    const addMsg = 
`‚úÖ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ${listAdded.length} ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ Approve ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:

${listAdded.join("\n\n")}

üëë Crafted by TOHIDUL`;
                    return api.sendMessage(addMsg, threadID, messageID);
                } else if (content.length && !isNaN(content[0])) {
                    if (!APPROVED.includes(content[0])) {
                        APPROVED.push(content[0]);
                        config.APPROVED.push(content[0]);
                    }
                    let displayInfo;
                    try {
                        const groupName = (await global.data.threadInfo.get(content[0])).threadName || "Unknown Group";
                        displayInfo = `üìå ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™: ${groupName}\nüÜî ‡¶Ü‡¶á‡¶°‡¶ø: ${content[0]}`;
                    } catch (e) {
                        const userName = await Users.getNameUser(content[0]);
                        displayInfo = `üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: ${userName}\nüÜî ‡¶Ü‡¶á‡¶°‡¶ø: ${content[0]}`;
                    }
                    writeFileSync(configPath, JSON.stringify(config, null, 2), 'utf8');
                    const addMsg = 
`‚úÖ Approve ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®!\n\n${displayInfo}\n\nüëë Crafted by TOHIDUL`;
                    return api.sendMessage('‚úÖ ‡¶è‡¶á ‡¶¨‡¶ï‡ßç‡¶∏/‡¶á‡¶â‡¶ú‡¶æ‡¶∞ Approve ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!', content[0], () => {
                        return api.sendMessage(addMsg, threadID, messageID);
                    });
                } else {
                    return api.sendMessage("‚ùå ‡¶∏‡¶†‡¶ø‡¶ï threadID ‡¶¶‡¶ø‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®!", threadID, messageID);
                }
            }

            case "remove":
            case "rm":
            case "delete": {
                if (mention.length && isNaN(content[0])) {
                    let listRemoved = [];
                    for (const id of mention) {
                        const index = config.APPROVED.findIndex(item => item == id);
                        if (index !== -1) {
                            APPROVED.splice(index, 1);
                            config.APPROVED.splice(index, 1);
                            listRemoved.push(`üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: ${event.mentions[id]}\nüÜî ‡¶Ü‡¶á‡¶°‡¶ø: ${id}`);
                        }
                    }
                    writeFileSync(configPath, JSON.stringify(config, null, 2), 'utf8');
                    const removeMsg = 
`üóëÔ∏è ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ${listRemoved.length} ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ Remove ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:

${listRemoved.join('\n\n')}

üëë Crafted by TOHIDUL`;
                    return api.sendMessage(removeMsg, threadID, messageID);
                } else if (content.length && !isNaN(content[0])) {
                    const index = config.APPROVED.findIndex(item => item.toString() == content[0]);
                    if (index !== -1) {
                        APPROVED.splice(index, 1);
                        config.APPROVED.splice(index, 1);
                        let displayInfo;
                        try {
                            const groupName = (await global.data.threadInfo.get(content[0])).threadName || "Unknown Group";
                            displayInfo = `üìå ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™: ${groupName}\nüÜî ‡¶Ü‡¶á‡¶°‡¶ø: ${content[0]}`;
                        } catch (e) {
                            const userName = await Users.getNameUser(content[0]);
                            displayInfo = `üë§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: ${userName}\nüÜî ‡¶Ü‡¶á‡¶°‡¶ø: ${content[0]}`;
                        }
                        writeFileSync(configPath, JSON.stringify(config, null, 2), 'utf8');
                        const removeMsg = 
`üóëÔ∏è Remove ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®!\n\n${displayInfo}\n\nüëë Crafted by TOHIDUL`;
                        return api.sendMessage('üóëÔ∏è ‡¶è‡¶á ‡¶¨‡¶ï‡ßç‡¶∏/‡¶á‡¶â‡¶ú‡¶æ‡¶∞ Approve ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá Remove ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!', content[0], () => {
                            return api.sendMessage(removeMsg, threadID, messageID);
                        });
                    } else {
                        return api.sendMessage("‚ùå ‡¶â‡¶ï‡ßç‡¶§ ‡¶Ü‡¶á‡¶°‡¶ø Approve ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶®‡ßá‡¶á!", threadID, messageID);
                    }
                } else {
                    return api.sendMessage("‚ùå ‡¶∏‡¶†‡¶ø‡¶ï threadID ‡¶¶‡¶ø‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®!", threadID, messageID);
                }
            }

            default: {
                return api.sendMessage("‚ùå ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶≠‡ßÅ‡¶≤! approve [list|box|remove] [threadID|@mentions] ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", threadID, messageID);
            }
        }
    } catch (error) {
        return api.sendMessage("‚ùå ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", threadID, messageID);
    }
};